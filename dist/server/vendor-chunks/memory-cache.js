"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/memory-cache";
exports.ids = ["vendor-chunks/memory-cache"];
exports.modules = {

/***/ "(ssr)/./node_modules/memory-cache/index.js":
/*!********************************************!*\
  !*** ./node_modules/memory-cache/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nfunction Cache () {\n  var _cache = Object.create(null);\n  var _hitCount = 0;\n  var _missCount = 0;\n  var _size = 0;\n  var _debug = false;\n\n  this.put = function(key, value, time, timeoutCallback) {\n    if (_debug) {\n      console.log('caching: %s = %j (@%s)', key, value, time);\n    }\n\n    if (typeof time !== 'undefined' && (typeof time !== 'number' || isNaN(time) || time <= 0)) {\n      throw new Error('Cache timeout must be a positive number');\n    } else if (typeof timeoutCallback !== 'undefined' && typeof timeoutCallback !== 'function') {\n      throw new Error('Cache timeout callback must be a function');\n    }\n\n    var oldRecord = _cache[key];\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n    } else {\n      _size++;\n    }\n\n    var record = {\n      value: value,\n      expire: time + Date.now()\n    };\n\n    if (!isNaN(record.expire)) {\n      record.timeout = setTimeout(function() {\n        _del(key);\n        if (timeoutCallback) {\n          timeoutCallback(key, value);\n        }\n      }.bind(this), time);\n    }\n\n    _cache[key] = record;\n\n    return value;\n  };\n\n  this.del = function(key) {\n    var canDelete = true;\n\n    var oldRecord = _cache[key];\n    if (oldRecord) {\n      clearTimeout(oldRecord.timeout);\n      if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {\n        canDelete = false;\n      }\n    } else {\n      canDelete = false;\n    }\n\n    if (canDelete) {\n      _del(key);\n    }\n\n    return canDelete;\n  };\n\n  function _del(key){\n    _size--;\n    delete _cache[key];\n  }\n\n  this.clear = function() {\n    for (var key in _cache) {\n      clearTimeout(_cache[key].timeout);\n    }\n    _size = 0;\n    _cache = Object.create(null);\n    if (_debug) {\n      _hitCount = 0;\n      _missCount = 0;\n    }\n  };\n\n  this.get = function(key) {\n    var data = _cache[key];\n    if (typeof data != \"undefined\") {\n      if (isNaN(data.expire) || data.expire >= Date.now()) {\n        if (_debug) _hitCount++;\n        return data.value;\n      } else {\n        // free some space\n        if (_debug) _missCount++;\n        _size--;\n        delete _cache[key];\n      }\n    } else if (_debug) {\n      _missCount++;\n    }\n    return null;\n  };\n\n  this.size = function() {\n    return _size;\n  };\n\n  this.memsize = function() {\n    var size = 0,\n      key;\n    for (key in _cache) {\n      size++;\n    }\n    return size;\n  };\n\n  this.debug = function(bool) {\n    _debug = bool;\n  };\n\n  this.hits = function() {\n    return _hitCount;\n  };\n\n  this.misses = function() {\n    return _missCount;\n  };\n\n  this.keys = function() {\n    return Object.keys(_cache);\n  };\n\n  this.exportJson = function() {\n    var plainJsCache = {};\n\n    // Discard the `timeout` property.\n    // Note: JSON doesn't support `NaN`, so convert it to `'NaN'`.\n    for (var key in _cache) {\n      var record = _cache[key];\n      plainJsCache[key] = {\n        value: record.value,\n        expire: record.expire || 'NaN',\n      };\n    }\n\n    return JSON.stringify(plainJsCache);\n  };\n\n  this.importJson = function(jsonToImport, options) {\n    var cacheToImport = JSON.parse(jsonToImport);\n    var currTime = Date.now();\n\n    var skipDuplicates = options && options.skipDuplicates;\n\n    for (var key in cacheToImport) {\n      if (cacheToImport.hasOwnProperty(key)) {\n        if (skipDuplicates) {\n          var existingRecord = _cache[key];\n          if (existingRecord) {\n            if (_debug) {\n              console.log('Skipping duplicate imported key \\'%s\\'', key);\n            }\n            continue;\n          }\n        }\n\n        var record = cacheToImport[key];\n\n        // record.expire could be `'NaN'` if no expiry was set.\n        // Try to subtract from it; a string minus a number is `NaN`, which is perfectly fine here.\n        var remainingTime = record.expire - currTime;\n\n        if (remainingTime <= 0) {\n          // Delete any record that might exist with the same key, since this key is expired.\n          this.del(key);\n          continue;\n        }\n\n        // Remaining time must now be either positive or `NaN`,\n        // but `put` will throw an error if we try to give it `NaN`.\n        remainingTime = remainingTime > 0 ? remainingTime : undefined;\n\n        this.put(key, record.value, remainingTime);\n      }\n    }\n\n    return this.size();\n  };\n}\n\nmodule.exports = new Cache();\nmodule.exports.Cache = Cache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtb3J5LWNhY2hlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbXBsaWZ5LWdoLWFwcC8uL25vZGVfbW9kdWxlcy9tZW1vcnktY2FjaGUvaW5kZXguanM/NzA4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIENhY2hlICgpIHtcbiAgdmFyIF9jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBfaGl0Q291bnQgPSAwO1xuICB2YXIgX21pc3NDb3VudCA9IDA7XG4gIHZhciBfc2l6ZSA9IDA7XG4gIHZhciBfZGVidWcgPSBmYWxzZTtcblxuICB0aGlzLnB1dCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHRpbWUsIHRpbWVvdXRDYWxsYmFjaykge1xuICAgIGlmIChfZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYWNoaW5nOiAlcyA9ICVqIChAJXMpJywga2V5LCB2YWx1ZSwgdGltZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aW1lICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIHRpbWUgIT09ICdudW1iZXInIHx8IGlzTmFOKHRpbWUpIHx8IHRpbWUgPD0gMCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FjaGUgdGltZW91dCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGltZW91dENhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGltZW91dENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhY2hlIHRpbWVvdXQgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIG9sZFJlY29yZCA9IF9jYWNoZVtrZXldO1xuICAgIGlmIChvbGRSZWNvcmQpIHtcbiAgICAgIGNsZWFyVGltZW91dChvbGRSZWNvcmQudGltZW91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9zaXplKys7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGV4cGlyZTogdGltZSArIERhdGUubm93KClcbiAgICB9O1xuXG4gICAgaWYgKCFpc05hTihyZWNvcmQuZXhwaXJlKSkge1xuICAgICAgcmVjb3JkLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBfZGVsKGtleSk7XG4gICAgICAgIGlmICh0aW1lb3V0Q2FsbGJhY2spIHtcbiAgICAgICAgICB0aW1lb3V0Q2FsbGJhY2soa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSwgdGltZSk7XG4gICAgfVxuXG4gICAgX2NhY2hlW2tleV0gPSByZWNvcmQ7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgdGhpcy5kZWwgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgY2FuRGVsZXRlID0gdHJ1ZTtcblxuICAgIHZhciBvbGRSZWNvcmQgPSBfY2FjaGVba2V5XTtcbiAgICBpZiAob2xkUmVjb3JkKSB7XG4gICAgICBjbGVhclRpbWVvdXQob2xkUmVjb3JkLnRpbWVvdXQpO1xuICAgICAgaWYgKCFpc05hTihvbGRSZWNvcmQuZXhwaXJlKSAmJiBvbGRSZWNvcmQuZXhwaXJlIDwgRGF0ZS5ub3coKSkge1xuICAgICAgICBjYW5EZWxldGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FuRGVsZXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGNhbkRlbGV0ZSkge1xuICAgICAgX2RlbChrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiBjYW5EZWxldGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gX2RlbChrZXkpe1xuICAgIF9zaXplLS07XG4gICAgZGVsZXRlIF9jYWNoZVtrZXldO1xuICB9XG5cbiAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGtleSBpbiBfY2FjaGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChfY2FjaGVba2V5XS50aW1lb3V0KTtcbiAgICB9XG4gICAgX3NpemUgPSAwO1xuICAgIF9jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKF9kZWJ1Zykge1xuICAgICAgX2hpdENvdW50ID0gMDtcbiAgICAgIF9taXNzQ291bnQgPSAwO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBkYXRhID0gX2NhY2hlW2tleV07XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChpc05hTihkYXRhLmV4cGlyZSkgfHwgZGF0YS5leHBpcmUgPj0gRGF0ZS5ub3coKSkge1xuICAgICAgICBpZiAoX2RlYnVnKSBfaGl0Q291bnQrKztcbiAgICAgICAgcmV0dXJuIGRhdGEudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBmcmVlIHNvbWUgc3BhY2VcbiAgICAgICAgaWYgKF9kZWJ1ZykgX21pc3NDb3VudCsrO1xuICAgICAgICBfc2l6ZS0tO1xuICAgICAgICBkZWxldGUgX2NhY2hlW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfZGVidWcpIHtcbiAgICAgIF9taXNzQ291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5zaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9zaXplO1xuICB9O1xuXG4gIHRoaXMubWVtc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMCxcbiAgICAgIGtleTtcbiAgICBmb3IgKGtleSBpbiBfY2FjaGUpIHtcbiAgICAgIHNpemUrKztcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG4gIH07XG5cbiAgdGhpcy5kZWJ1ZyA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgICBfZGVidWcgPSBib29sO1xuICB9O1xuXG4gIHRoaXMuaGl0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfaGl0Q291bnQ7XG4gIH07XG5cbiAgdGhpcy5taXNzZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX21pc3NDb3VudDtcbiAgfTtcblxuICB0aGlzLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoX2NhY2hlKTtcbiAgfTtcblxuICB0aGlzLmV4cG9ydEpzb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGxhaW5Kc0NhY2hlID0ge307XG5cbiAgICAvLyBEaXNjYXJkIHRoZSBgdGltZW91dGAgcHJvcGVydHkuXG4gICAgLy8gTm90ZTogSlNPTiBkb2Vzbid0IHN1cHBvcnQgYE5hTmAsIHNvIGNvbnZlcnQgaXQgdG8gYCdOYU4nYC5cbiAgICBmb3IgKHZhciBrZXkgaW4gX2NhY2hlKSB7XG4gICAgICB2YXIgcmVjb3JkID0gX2NhY2hlW2tleV07XG4gICAgICBwbGFpbkpzQ2FjaGVba2V5XSA9IHtcbiAgICAgICAgdmFsdWU6IHJlY29yZC52YWx1ZSxcbiAgICAgICAgZXhwaXJlOiByZWNvcmQuZXhwaXJlIHx8ICdOYU4nLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGxhaW5Kc0NhY2hlKTtcbiAgfTtcblxuICB0aGlzLmltcG9ydEpzb24gPSBmdW5jdGlvbihqc29uVG9JbXBvcnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgY2FjaGVUb0ltcG9ydCA9IEpTT04ucGFyc2UoanNvblRvSW1wb3J0KTtcbiAgICB2YXIgY3VyclRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgdmFyIHNraXBEdXBsaWNhdGVzID0gb3B0aW9ucyAmJiBvcHRpb25zLnNraXBEdXBsaWNhdGVzO1xuXG4gICAgZm9yICh2YXIga2V5IGluIGNhY2hlVG9JbXBvcnQpIHtcbiAgICAgIGlmIChjYWNoZVRvSW1wb3J0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaWYgKHNraXBEdXBsaWNhdGVzKSB7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nUmVjb3JkID0gX2NhY2hlW2tleV07XG4gICAgICAgICAgaWYgKGV4aXN0aW5nUmVjb3JkKSB7XG4gICAgICAgICAgICBpZiAoX2RlYnVnKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTa2lwcGluZyBkdXBsaWNhdGUgaW1wb3J0ZWQga2V5IFxcJyVzXFwnJywga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvcmQgPSBjYWNoZVRvSW1wb3J0W2tleV07XG5cbiAgICAgICAgLy8gcmVjb3JkLmV4cGlyZSBjb3VsZCBiZSBgJ05hTidgIGlmIG5vIGV4cGlyeSB3YXMgc2V0LlxuICAgICAgICAvLyBUcnkgdG8gc3VidHJhY3QgZnJvbSBpdDsgYSBzdHJpbmcgbWludXMgYSBudW1iZXIgaXMgYE5hTmAsIHdoaWNoIGlzIHBlcmZlY3RseSBmaW5lIGhlcmUuXG4gICAgICAgIHZhciByZW1haW5pbmdUaW1lID0gcmVjb3JkLmV4cGlyZSAtIGN1cnJUaW1lO1xuXG4gICAgICAgIGlmIChyZW1haW5pbmdUaW1lIDw9IDApIHtcbiAgICAgICAgICAvLyBEZWxldGUgYW55IHJlY29yZCB0aGF0IG1pZ2h0IGV4aXN0IHdpdGggdGhlIHNhbWUga2V5LCBzaW5jZSB0aGlzIGtleSBpcyBleHBpcmVkLlxuICAgICAgICAgIHRoaXMuZGVsKGtleSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1haW5pbmcgdGltZSBtdXN0IG5vdyBiZSBlaXRoZXIgcG9zaXRpdmUgb3IgYE5hTmAsXG4gICAgICAgIC8vIGJ1dCBgcHV0YCB3aWxsIHRocm93IGFuIGVycm9yIGlmIHdlIHRyeSB0byBnaXZlIGl0IGBOYU5gLlxuICAgICAgICByZW1haW5pbmdUaW1lID0gcmVtYWluaW5nVGltZSA+IDAgPyByZW1haW5pbmdUaW1lIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMucHV0KGtleSwgcmVjb3JkLnZhbHVlLCByZW1haW5pbmdUaW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zaXplKCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENhY2hlKCk7XG5tb2R1bGUuZXhwb3J0cy5DYWNoZSA9IENhY2hlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/memory-cache/index.js\n");

/***/ })

};
;